
Ast => Ast TopLevel 
Ast => TopLevel

TopLevel => Function 
TopLevel => TypeDecl 

TypeDecl => ident eq { TypeList }

TypeList => ident : ident , TypeList 
TypeList => ident : ident

Function => ident : ReturnTypes Scope 

Types => Types -> ( ident : Type )
Types => ( ident : Type ) 

ReturnTypes => Types -> ident 
ReturnTypes => ident
ReturnTypes => ( )

Scope => Scope Stm 
Scope => Stm

Stm => let ident = Exp in
Stm => return Exp
Stm => if Exp then Exp else Exp
Stm => for ident in Exp -> Exp <- 
Stm => var ident = Exp ; 


Exp => Exp ( Fparams )
Exp => Exp ( )
Exp => Exp Op Term 
Exp => Term 
Exp => Exp . . Term
Exp => ( Scope )
Exp => [ ArrLit ]
Exp => Exp [ Exp ]

Fparams => Exp , Fparams 
Fparams => Exp

ArrLit => literal , ArrLit 
ArrLit => literal

Op => plus 
Op => minus 
Op => mult
Op => slash
Op => lt 
Op => lte 
Op => gt 
Op => gte
Op => eq eq

Type => ident 
Type => [ ident ]

Term => ( Exp ) 
Term => literal 
Term => ident


