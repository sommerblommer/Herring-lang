
Ast => Ast Function 
Ast => Function

Function => ident : ReturnTypes Scope 

Types => Types -> ( ident : ident )
Types => ( ident : ident ) 

ReturnTypes => Types -> ident 
ReturnTypes => ident
ReturnTypes => ( )

Scope => Scope Stm 
Scope => Stm

Stm => let ident = Exp in
Stm => return Exp
Stm => if Exp then Exp else Exp
Stm => for ident in Exp -> Exp <- 


Exp => Exp ( Fparams )
Exp => Exp Op Term 
Exp => Term 
Exp => Exp . . Term
Exp => ( Scope )

Fparams => Exp , Fparams 
Fparams => Exp


Op => plus 
Op => minus 
Op => mult
Op => lt 
Op => lte 
Op => gt 
Op => gte
Op => eq eq

Term => ( Exp ) 
Term => literal 
Term => ident


